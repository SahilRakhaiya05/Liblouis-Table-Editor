Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 liblouis-table-editor (1.0-2) UNRELEASED; urgency=medium
 .
   * Added screen reader compatibility and improved keyboard navigation
Author: kahil Rakhaiya <sahilrakhaiya05@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2025-07-02

--- liblouis-table-editor-1.0.orig/INSTALLER-LICENSE.txt
+++ liblouis-table-editor-1.0/INSTALLER-LICENSE.txt
@@ -2,7 +2,8 @@ MIT License
 
 Copyright (c) 2025 
 
-Developers: Riya Jain & Sahil Rakhaiya - Zendalona
+Developed by Riya Jain  GSoC'24 Contributor and Sahil Rakhaiya GSoC'25 Contributor
+Mentors: Nalin, Samuel Thibault, K Sathaseelan, Prabhu Kondarangi
 
 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/__main__.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/__main__.py
@@ -1,7 +1,7 @@
 import sys
 import os
-from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QTabWidget, QLabel, QStackedLayout, QMessageBox, QFileDialog, QDesktopWidget
-from PyQt5.QtGui import QPalette, QColor, QPixmap, QIcon
+from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QTabWidget, QLabel, QStackedLayout, QMessageBox, QFileDialog, QDesktopWidget, QShortcut
+from PyQt5.QtGui import QPalette, QColor, QPixmap, QIcon, QKeySequence
 from PyQt5.QtCore import Qt
 from liblouis_table_editor.config import WINDOW_WIDTH, WINDOW_HEIGHT
 from liblouis_table_editor.components.Menubar import create_menubar
@@ -14,7 +14,7 @@ class TableManager(QWidget):
     def __init__(self):
         super().__init__()
 
-        self.setWindowTitle('Liblouis Table Editor')
+        self.setWindowTitle('Liblouis-Table-Editor')
         self.setObjectName("liblouis-table-editor")
         
         self.setMinimumSize(1000, 600)
@@ -77,6 +77,9 @@ class TableManager(QWidget):
 
         self.showMaximized()
 
+        self.focus_menu_shortcut = QShortcut(QKeySequence("Alt+F"), self)
+        self.focus_menu_shortcut.activated.connect(self.focus_file_menu)
+
     def handle_file_opened(self, file_name, file_content, file_path):
         self.add_tab(file_name, file_content, file_path)
         self.stacked_layout.setCurrentIndex(1)
@@ -234,6 +237,14 @@ class TableManager(QWidget):
         
         event.accept()
 
+    def focus_file_menu(self):
+
+        if self.menubar:
+            file_menu = self.menubar.actions()[0].menu()
+            if file_menu:
+                self.menubar.setActiveAction(self.menubar.actions()[0])
+                file_menu.popup(self.menubar.mapToGlobal(self.menubar.actionGeometry(self.menubar.actions()[0]).bottomLeft()))
+                self.menubar.setFocus()
 
 def main():
     app = QApplication(sys.argv)
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/AddEntry/AddEntryWidget.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/AddEntry/AddEntryWidget.py
@@ -6,7 +6,7 @@ from PyQt5.QtWidgets import (
     QWidget, QVBoxLayout, QHBoxLayout, QTextEdit,
     QLineEdit, QComboBox, QLabel, QPushButton, QSizePolicy, QLayout
 )
-from PyQt5.QtCore import Qt
+from PyQt5.QtCore import Qt, QEvent
 from liblouis_table_editor.components.AddEntry.BrailleInputWidget import BrailleInputWidget
 from liblouis_table_editor.components.AddEntry.UnicodeSelector import UnicodeSelector
 from liblouis_table_editor.utils.view import clearLayout
@@ -40,6 +40,8 @@ class OpcodeForm(QWidget):
             if field == "opcode":
                 nested_opcode_combo = QComboBox()
                 nested_opcode_combo.setPlaceholderText("Select Opcode")
+                nested_opcode_combo.setAccessibleName("Opcode Combo Box")
+                nested_opcode_combo.installEventFilter(self)
                 self.populate_opcode_combo(nested_opcode_combo, placeholder)
                 nested_opcode_combo.currentIndexChanged.connect(
                     lambda idx, combo=nested_opcode_combo: self.on_opcode_selected(idx, combo)
@@ -51,9 +53,13 @@ class OpcodeForm(QWidget):
                 unicode_container = QHBoxLayout()
                 unicode_display = QLineEdit()
                 unicode_display.setPlaceholderText("Selected Character")
+                unicode_display.setAccessibleName("Unicode Display Field")
+                unicode_display.installEventFilter(self)
                 unicode_input = QLineEdit()
                 unicode_input.setPlaceholderText(placeholder)
                 unicode_input.setProperty("includeInEntry", True)
+                unicode_input.setAccessibleName("Unicode Input Field")
+                unicode_input.installEventFilter(self)
                 
                 # Set size policy for full width
                 unicode_input.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
@@ -63,6 +69,8 @@ class OpcodeForm(QWidget):
                 unicode_display.textChanged.connect(lambda text, u_input=unicode_input: self.updateUnicodeInput(text, u_input))
 
                 select_button = QPushButton("Select Unicode")
+                select_button.setAccessibleName("Select Unicode Button")
+                select_button.installEventFilter(self)
                 select_button.clicked.connect(lambda _, u_display=unicode_display, u_input=unicode_input: self.showUnicodePopup(u_display, u_input))
 
                 unicode_container.addWidget(unicode_display)
@@ -78,6 +86,8 @@ class OpcodeForm(QWidget):
             elif field == "name":
                 name_input = QLineEdit()
                 name_input.setPlaceholderText(placeholder)
+                name_input.setAccessibleName("Name Input Field")
+                name_input.installEventFilter(self)
                 # Set size policy for full width
                 name_input.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
                 self.form_layout.addWidget(name_input)
@@ -86,6 +96,8 @@ class OpcodeForm(QWidget):
             elif field == "characters":
                 inp = QTextEdit()
                 inp.setPlaceholderText(placeholder)
+                inp.setAccessibleName("Characters Input Text Area")
+                inp.installEventFilter(self)
                 # Set size policy for full width
                 inp.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
                 self.form_layout.addWidget(inp)
@@ -93,6 +105,7 @@ class OpcodeForm(QWidget):
 
             elif field == "dots":
                 self.braille_input_widget = BrailleInputWidget()
+                self.braille_input_widget.braille_input.installEventFilter(self)
                 self.form_layout.addWidget(self.braille_input_widget)
                 self.field_inputs[field] = self.braille_input_widget.braille_input
             
@@ -105,8 +118,11 @@ class OpcodeForm(QWidget):
                 at_symbol.setFixedWidth(40)
                 at_symbol.setFixedHeight(50)
                 at_symbol.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Preferred)
+                at_symbol.setAccessibleName("At Symbol Field")
+                at_symbol.installEventFilter(self)
 
-                self.braille_input_widget = BrailleInputWidget()  # Reuse the BrailleInputWidget
+                self.braille_input_widget = BrailleInputWidget()
+                self.braille_input_widget.braille_input.installEventFilter(self)
 
                 exactdots_container.addWidget(at_symbol)
                 exactdots_container.addWidget(self.braille_input_widget)
@@ -119,6 +135,7 @@ class OpcodeForm(QWidget):
                 
                 for i in range(placeholder):
                     braille_input_widget = BrailleInputWidget()
+                    braille_input_widget.braille_input.installEventFilter(self)
                     groupdots_container.addWidget(braille_input_widget)
                     self.field_inputs[f"{field}_{i+1}"] = braille_input_widget.braille_input
                     
@@ -128,6 +145,8 @@ class OpcodeForm(QWidget):
                         comma_label.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Preferred)
                         comma_label.setFixedWidth(30)
                         comma_label.setFixedHeight(50)
+                        comma_label.setAccessibleName("Comma Label Field")
+                        comma_label.installEventFilter(self)
                         groupdots_container.addWidget(comma_label)
 
                 self.form_layout.addLayout(groupdots_container)
@@ -135,6 +154,8 @@ class OpcodeForm(QWidget):
             elif field == "base_attribute":
                 base_attr_dropdown = QComboBox()
                 base_attr_dropdown.addItems(["space", "digit", "letter", "lowercase", "uppercase", "punctuation", "sign", "math", "litdigit", "attribute", "before", "after"])         
+                base_attr_dropdown.setAccessibleName("Base Attribute Combo Box")
+                base_attr_dropdown.installEventFilter(self)
                 base_attr_dropdown.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
                 self.form_layout.addWidget(base_attr_dropdown)
                 self.field_inputs[field] = base_attr_dropdown
@@ -207,12 +228,87 @@ class OpcodeForm(QWidget):
             self.unicode_popup.close()
             self.unicode_popup = None
 
+    def get_focusable_widgets(self):
+        widgets = []
+        for field, widget in self.field_inputs.items():
+            if isinstance(widget, (QLineEdit, QTextEdit, QComboBox)):
+                widgets.append(widget)
+            elif isinstance(widget, tuple) and field == "exactdots":
+                widgets.extend(widget)
+            elif isinstance(widget, BrailleInputWidget):
+                widgets.append(widget.braille_input)
+            elif isinstance(widget, OpcodeForm):
+                widgets.extend(widget.get_focusable_widgets())
+        return widgets
+
+    def eventFilter(self, obj, event):
+        if event.type() == QEvent.Enter:
+            obj.setFocus()
+        return super().eventFilter(obj, event)
 
 class AddEntryWidget(QWidget):
     def __init__(self, parent=None):
         super().__init__(parent)
         self.field_inputs = {}
         self.initUI()
+        self.last_nav_was_tab = False
+        self.install_input_event_filters()
+
+    def install_input_event_filters(self):
+        def install_on_widget(w):
+            if isinstance(w, QLineEdit) or isinstance(w, QTextEdit):
+                w.installEventFilter(self)
+            elif hasattr(w, 'field_inputs'):
+                for subw in w.field_inputs.values():
+                    install_on_widget(subw)
+        if hasattr(self, 'opcode_combo'):
+            self.opcode_combo.installEventFilter(self)
+        for w in self.field_inputs.values():
+            install_on_widget(w)
+        if hasattr(self, 'comment_input'):
+            self.comment_input.installEventFilter(self)
+
+        for textedit in self.findChildren(QTextEdit):
+            textedit.installEventFilter(self)
+
+    def eventFilter(self, obj, event):
+        if event.type() == QEvent.FocusIn:
+            if self.last_nav_was_tab:
+                obj.setProperty('tabFocus', True)
+                obj.style().unpolish(obj)
+                obj.style().polish(obj)
+            else:
+                obj.setProperty('tabFocus', False)
+                obj.style().unpolish(obj)
+                obj.style().polish(obj)
+        elif event.type() == QEvent.FocusOut:
+            obj.setProperty('tabFocus', False)
+            obj.style().unpolish(obj)
+            obj.style().polish(obj)
+        elif event.type() == QEvent.KeyPress:
+
+            if isinstance(obj, QTextEdit):
+                if event.key() == Qt.Key_Tab and not event.modifiers():
+                    self.focusNextChild()
+                    return True
+                elif event.key() == Qt.Key_Backtab:
+                    self.focusPreviousChild()
+                    return True
+            if isinstance(obj, QLineEdit):
+                if event.key() in (Qt.Key_Tab, Qt.Key_Backtab):
+                    self.last_nav_was_tab = True
+                elif event.key() in (Qt.Key_Return, Qt.Key_Enter):
+                    self.last_nav_was_tab = True
+                    self.focusNextChild()
+                    return True
+                else:
+                    self.last_nav_was_tab = False
+
+            elif not isinstance(obj, (QLineEdit, QTextEdit)):
+                self.last_nav_was_tab = False
+        elif event.type() == QEvent.MouseButtonPress:
+            self.last_nav_was_tab = False
+        return super().eventFilter(obj, event)
 
     def clear_form(self):
         self.opcode_combo.setCurrentIndex(0)
@@ -269,12 +365,13 @@ class AddEntryWidget(QWidget):
             combo.addItem(opcode["code"], opcode)
 
     def on_opcode_selected(self, index):
-        clearLayout(self.form_layout)  # Clear previous forms
+        clearLayout(self.form_layout)  
         if index > 0:
             opcode = self.opcode_combo.itemData(index)
             nested_form = OpcodeForm(opcode["fields"], self)
             self.form_layout.addWidget(nested_form)
             self.field_inputs["nested_form"] = nested_form
+        self.install_input_event_filters()  
 
     def collect_entry_data(self):
         collected_data = [self.opcode_combo.currentText()]
@@ -311,3 +408,55 @@ class AddEntryWidget(QWidget):
         collected_data.append(self.comment_input.text())
 
         return ' '.join(collected_data).strip()
+
+    def get_focusable_widgets(self):
+        widgets = []
+        if hasattr(self, 'opcode_combo'):
+            widgets.append(self.opcode_combo)
+        if 'nested_form' in self.field_inputs and hasattr(self.field_inputs['nested_form'], 'get_focusable_widgets'):
+            widgets.extend(self.field_inputs['nested_form'].get_focusable_widgets())
+        if hasattr(self, 'comment_input'):
+            widgets.append(self.comment_input)
+        if hasattr(self, 'add_button'):
+            widgets.append(self.add_button)
+        return widgets
+
+    def keyPressEvent(self, event):
+        focusable = self.get_focusable_widgets()
+        if not focusable:
+            super().keyPressEvent(event)
+            return
+        current = self.focusWidget()
+        try:
+            idx = focusable.index(current)
+        except ValueError:
+            idx = -1
+        if event.key() == Qt.Key_Tab and not event.isAutoRepeat():
+            if event.modifiers() == Qt.ShiftModifier:
+                if idx == 0:
+                    p = self.parent()
+                    if hasattr(p, 'table_preview'):
+                        p.table_preview.setFocus()
+                        event.accept()
+                        return
+                elif idx > 0:
+                    focusable[idx-1].setFocus()
+                    event.accept()
+                    return
+            else:
+                if idx == len(focusable) - 1:
+                    p = self.parent()
+                    if hasattr(p, 'table_preview'):
+                        p.table_preview.setFocus()
+                        event.accept()
+                        return
+                elif idx < len(focusable) - 1:
+                    focusable[idx+1].setFocus()
+                    event.accept()
+                    return
+        elif event.key() in (Qt.Key_Return, Qt.Key_Enter):
+            if idx < len(focusable) - 1:
+                focusable[idx+1].setFocus()
+                event.accept()
+                return
+        super().keyPressEvent(event)
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/AddEntry/BrailleInputWidget.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/AddEntry/BrailleInputWidget.py
@@ -14,6 +14,7 @@ class BrailleInputWidget(QWidget):
 
         self.braille_input = QLineEdit()
         self.braille_input.setPlaceholderText("Enter Braille Dots (e.g., 12-34-56)")
+        self.braille_input.setAccessibleName("Braille Dots Input Field")
         
         braille_regex = QRegExp("^([1-6]{1,6})(-([1-6]{1,6}))*$")
         validator = QRegExpValidator(braille_regex, self.braille_input)
@@ -38,6 +39,7 @@ class BrailleInputWidget(QWidget):
             if self.is_valid_braille_sequence(sequence):
                 preview_label = QLabel(self.get_braille_representation(sequence))
                 preview_label.setAlignment(Qt.AlignCenter)
+                preview_label.setAccessibleName(f"Braille Preview: {sequence}")
                 self.braille_preview_container.addWidget(preview_label)
 
     def is_valid_braille_sequence(self, sequence):
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/AddEntry/EntryWidget.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/AddEntry/EntryWidget.py
@@ -63,6 +63,7 @@ class EntryWidget(QFrame):
                 
         self.label_text = QLabel(display_text)
         self.label_text.setWordWrap(False)
+        self.label_text.setAccessibleName(f"Entry: {display_text}")
         
         font = QFont()
         font.setPointSize(self.current_font_size)
@@ -86,6 +87,7 @@ class EntryWidget(QFrame):
         self.edit_line = QLineEdit(self.entry)
         self.edit_line.setVisible(False)
         self.edit_line.setFont(font)
+        self.edit_line.setAccessibleName(f"Edit Entry: {display_text}")
         self.layout.addWidget(self.edit_line)
         self.edit_line.editingFinished.connect(self.save_entry)
 
@@ -112,6 +114,10 @@ class EntryWidget(QFrame):
         delete_action.triggered.connect(self.delete_entry)
         menu.addAction(delete_action)
 
+        read_action = QAction('Read Entry', self)
+        read_action.triggered.connect(self.read_entry)
+        menu.addAction(read_action)
+
         menu.exec_(self.mapToGlobal(event.pos()))
 
     def duplicate_entry(self):
@@ -153,9 +159,12 @@ class EntryWidget(QFrame):
         self.setParent(None)
         self.deleteLater()
 
+    def read_entry(self):
+        self.label_text.setFocus()
+
     def onHoverEnter(self, event):
         if not self.property("selected"):
-            pass
+            self.setFocus() 
 
     def onHoverLeave(self, event):
         if not self.property("selected"):
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/AddEntry/OpcodeSelector.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/AddEntry/OpcodeSelector.py
@@ -19,16 +19,20 @@ class OpcodeSelector(QWidget):
         layout.setSpacing(10)
 
         self.search = QLineEdit()
+        self.search.setAccessibleName("Opcode Search Field")
         self.search.setPlaceholderText("Search for Opcode (hover for details)")
         self.search.textChanged.connect(self.filter_list)
 
         label = QLabel("Double click opcode to select")
+        label.setAccessibleName("Opcode Selector Instruction Label")
 
         self.list = QListWidget()
+        self.list.setAccessibleName("Opcode List Widget")
         self.list.setMouseTracking(True)
         self.list.installEventFilter(self)
 
         self.description_label = QLabel("")
+        self.description_label.setAccessibleName("Opcode Description Label")
         self.description_label.setWordWrap(True)
         self.description_label.setStyleSheet("QLabel { margin-top: 10px; }")
 
@@ -47,6 +51,7 @@ class OpcodeSelector(QWidget):
         for i, opcode in enumerate(opcodes):
             item = QListWidgetItem(f"{i}. {opcode['code']}")
             item.setToolTip(opcode["description"])
+            item.setData(Qt.AccessibleTextRole, f"Opcode: {opcode['code']}")
             self.list.addItem(item)
 
     def filter_list(self):
@@ -63,6 +68,7 @@ class OpcodeSelector(QWidget):
             item = self.list.itemAt(event.pos())
             if item:
                 self.display_description(item)
+                self.list.setCurrentItem(item) 
         return super().eventFilter(source, event)
 
     def display_description(self, item):
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/AddEntry/UnicodeSelector.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/AddEntry/UnicodeSelector.py
@@ -3,7 +3,7 @@ from PyQt5.QtWidgets import (
     QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTreeWidget, QTreeWidgetItem,
     QGridLayout, QScrollArea, QPushButton, QSizePolicy, QLineEdit, QTextEdit, QLabel
 )
-from PyQt5.QtCore import Qt, QSize
+from PyQt5.QtCore import Qt, QSize, QEvent
 from PyQt5.QtGui import QFont, QFontDatabase
 from liblouis_table_editor.utils.ApplyStyles import apply_styles
 import os
@@ -21,35 +21,43 @@ class UnicodeSelector(QWidget):
         main_layout.setSpacing(10)
 
         left_widget = QWidget()
+        left_widget.setAccessibleName("Unicode Selector Left Panel")
         left_widget.setFixedWidth(250)
         search_layout = QVBoxLayout(left_widget)
         search_layout.setContentsMargins(0, 0, 0, 0)
         search_layout.setSpacing(8)
 
         self.search_bar = QLineEdit()
+        self.search_bar.setAccessibleName("Unicode Block Search Field")
         self.search_bar.setPlaceholderText("Search Unicode Blocks...")
         self.search_bar.textChanged.connect(self.filter_blocks)
+        self.search_bar.installEventFilter(self)
         search_layout.addWidget(self.search_bar)
 
         self.tree = QTreeWidget()
+        self.tree.setAccessibleName("Unicode Blocks Tree")
         self.tree.setHeaderLabel("Unicode Blocks")
         self.populate_tree()
         self.tree.itemClicked.connect(self.display_characters)
         self.tree.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
+        self.tree.installEventFilter(self)
         search_layout.addWidget(self.tree)
 
         right_widget = QWidget()
+        right_widget.setAccessibleName("Unicode Selector Right Panel")
         char_search_layout = QVBoxLayout(right_widget)
         char_search_layout.setContentsMargins(0, 0, 0, 0)
         char_search_layout.setSpacing(8)
 
         scroll_area = QScrollArea()
+        scroll_area.setAccessibleName("Unicode Characters Scroll Area")
         scroll_area.setObjectName("unicode_selector")
         scroll_area.setWidgetResizable(True)
         scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
         scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
         
         self.char_container = QWidget()
+        self.char_container.setAccessibleName("Unicode Characters Container")
         self.char_layout = QGridLayout(self.char_container)
         self.char_layout.setContentsMargins(4, 4, 4, 4)
         self.char_layout.setSpacing(1)
@@ -58,21 +66,37 @@ class UnicodeSelector(QWidget):
         char_search_layout.addWidget(scroll_area)
 
         selection_widget = QWidget()
+        selection_widget.setAccessibleName("Unicode Selection Widget")
         selection_layout = QHBoxLayout(selection_widget)
         selection_layout.setContentsMargins(0, 0, 0, 0)
         selection_layout.setSpacing(8)
 
         self.selected_text_edit = QTextEdit()
+        self.selected_text_edit.setAccessibleName("Selected Characters Text Edit")
         self.selected_text_edit.setObjectName("selected_text_edit")
         self.selected_text_edit.setFont(QFont('', 16))
         self.selected_text_edit.setPlaceholderText("Selected characters")
         self.selected_text_edit.setFixedHeight(40)
         self.selected_text_edit.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
+        self.selected_text_edit.installEventFilter(self)
         selection_layout.addWidget(self.selected_text_edit)
 
+        self.unicode_display = QLineEdit()
+        self.unicode_display.setAccessibleName("Unicode Code Points Display")
+        self.unicode_display.setReadOnly(True)
+        self.unicode_display.setPlaceholderText("Unicode code points")
+        self.unicode_display.setFont(QFont('', 12))
+        self.unicode_display.installEventFilter(self)
+        char_search_layout.addWidget(self.unicode_display)
+
+        self.selected_text_edit.textChanged.connect(self.update_unicode_display)
+        self.update_unicode_display()
+
         self.done_button = QPushButton("Done")
+        self.done_button.setAccessibleName("Unicode Selection Done Button")
         self.done_button.setObjectName("done_button")
         self.done_button.clicked.connect(self.confirm_selection)
+        self.done_button.installEventFilter(self)
         selection_layout.addWidget(self.done_button)
         char_search_layout.addWidget(selection_widget)
 
@@ -443,6 +467,8 @@ class UnicodeSelector(QWidget):
 
         self.char_container.setFixedSize(container_width, container_height)
 
+        self.char_buttons = [[None for _ in range(num_columns)] for _ in range(num_rows)]
+
         # Load bundled fonts if not already loaded
         font_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), 'assets', 'font')
         noto_path = os.path.join(font_dir, 'NotoSans.ttf')
@@ -476,35 +502,19 @@ class UnicodeSelector(QWidget):
                 char_button.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
                 char_button.setFixedSize(QSize(button_size, button_size))
                 char_button.setFont(unicode_font)
-
-                char_button.setStyleSheet("""
-                    QPushButton {
-                        font-size: 16px;
-                        font-weight: normal;
-                        background: white;
-                        border: 1px solid #ddd;
-                        border-radius: 2px;
-                        margin: 0px;
-                        padding: 0px;
-                    }
-                    QPushButton:hover {
-                        background: #e6f7ff;
-                        border: 1px solid #1890ff;
-                    }
-                    QPushButton:pressed {
-                        background: #bae7ff;
-                    }
-                """)
+                char_button.setFocusPolicy(Qt.StrongFocus)
                 char_button.clicked.connect(self.character_selected)
+                char_button.installEventFilter(self)
+                self.char_buttons[row][col] = char_button
                 self.char_layout.addWidget(char_button, row, col)
 
     def character_selected(self):
         char_button = self.sender()
         selected_char = char_button.text()
-
         cursor = self.selected_text_edit.textCursor()
         cursor.insertText(selected_char)
         self.selected_text_edit.setTextCursor(cursor)
+        self.update_unicode_display()
 
     def confirm_selection(self):
         manual_input = self.selected_text_edit.toPlainText()
@@ -523,3 +533,111 @@ class UnicodeSelector(QWidget):
     def adjust_component_sizes(self):
         self.tree.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
         self.char_container.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
+
+    def eventFilter(self, obj, event):
+
+        if not (hasattr(self, 'search_bar') and hasattr(self, 'tree') and hasattr(self, 'selected_text_edit') and hasattr(self, 'unicode_display') and hasattr(self, 'done_button')):
+            return super().eventFilter(obj, event)
+
+        widgets = [self.search_bar, self.tree]
+
+        first_char = None
+        if hasattr(self, 'char_buttons') and self.char_buttons:
+            for row in self.char_buttons:
+                for btn in row:
+                    if btn:
+                        first_char = btn
+                        break
+                if first_char:
+                    break
+        if first_char:
+            widgets.append(first_char)
+        widgets += [self.selected_text_edit, self.unicode_display, self.done_button]
+
+        if isinstance(obj, QPushButton) and hasattr(self, 'char_buttons'):
+            if event.type() == QEvent.FocusIn:
+                obj.setProperty('kbdFocus', True)
+                obj.style().unpolish(obj)
+                obj.style().polish(obj)
+            elif event.type() == QEvent.FocusOut:
+                obj.setProperty('kbdFocus', False)
+                obj.style().unpolish(obj)
+                obj.style().polish(obj)
+
+        if isinstance(obj, QPushButton) and hasattr(self, 'char_buttons') and event.type() == QEvent.KeyPress:
+            for row_idx, row in enumerate(self.char_buttons):
+                for col_idx, btn in enumerate(row):
+                    if btn is obj:
+                        if event.key() == Qt.Key_Right:
+
+                            next_col = col_idx + 1
+                            if next_col < len(row) and row[next_col]:
+                                row[next_col].setFocus()
+                            else:
+
+                                if row_idx + 1 < len(self.char_buttons) and self.char_buttons[row_idx+1][0]:
+                                    self.char_buttons[row_idx+1][0].setFocus()
+                            return True
+                        elif event.key() == Qt.Key_Left:
+
+                            prev_col = col_idx - 1
+                            if prev_col >= 0 and row[prev_col]:
+                                row[prev_col].setFocus()
+                            else:
+
+                                if row_idx - 1 >= 0:
+                                    prev_row = self.char_buttons[row_idx-1]
+                                    for last_col in reversed(range(len(prev_row))):
+                                        if prev_row[last_col]:
+                                            prev_row[last_col].setFocus()
+                                            break
+                            return True
+                        elif event.key() == Qt.Key_Down:
+
+                            if row_idx + 1 < len(self.char_buttons) and self.char_buttons[row_idx+1][col_idx]:
+                                self.char_buttons[row_idx+1][col_idx].setFocus()
+                            return True
+                        elif event.key() == Qt.Key_Up:
+
+                            if row_idx - 1 >= 0 and self.char_buttons[row_idx-1][col_idx]:
+                                self.char_buttons[row_idx-1][col_idx].setFocus()
+                            return True
+                        elif event.key() in (Qt.Key_Return, Qt.Key_Enter, Qt.Key_Space):
+                            obj.click()
+                            return True
+                        elif event.key() == Qt.Key_Tab and not event.modifiers():
+                            self.selected_text_edit.setFocus()
+                            return True
+                        elif event.key() == Qt.Key_Backtab:
+                            self.tree.setFocus()
+                            return True
+
+        if event.type() == QEvent.KeyPress:
+            if event.key() == Qt.Key_Tab and not event.modifiers():
+                if obj in widgets:
+                    idx = widgets.index(obj)
+                    if idx + 1 < len(widgets):
+                        widgets[idx+1].setFocus()
+                        return True
+            elif event.key() == Qt.Key_Backtab:
+                if obj in widgets:
+                    idx = widgets.index(obj)
+                    if idx - 1 >= 0:
+                        widgets[idx-1].setFocus()
+                        return True
+
+        if obj is self.tree and event.type() == QEvent.KeyPress:
+            if event.key() in (Qt.Key_Return, Qt.Key_Enter, Qt.Key_Space):
+                item = self.tree.currentItem()
+                if item:
+                    self.display_characters(item, 0)
+                    return True
+        return super().eventFilter(obj, event)
+
+    def update_unicode_display(self):
+        text = self.selected_text_edit.toPlainText()
+        if text:
+            codes = ' '.join(f"U+{ord(c):04X}" for c in text)
+            self.unicode_display.setText(codes)
+        else:
+            self.unicode_display.clear()
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/ButtonTextInput.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/ButtonTextInput.py
@@ -7,7 +7,9 @@ class ButtonTextInput(QWidget):
         layout = QHBoxLayout()
 
         self.input = QLineEdit()
+        self.input.setAccessibleName("Button Text Input Field")
         self.button = QPushButton()
+        self.button.setAccessibleName("Button Text Input Button")
         
         layout.addWidget(self.input)
         layout.addWidget(self.button)
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/HelpDialogs.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/HelpDialogs.py
@@ -85,7 +85,12 @@ class AboutDialog(StyledDialog):
         <h2>License</h2>
         <pre style='background:#f8f8f8; border:1px solid #e5e5e5; border-radius:4px; padding:12px; font-size:1em; color:#333;'>MIT License</pre>
         <h2>Credits</h2>
-        <p>Developed by <b>Riya Jain & Sahil Rakhaiya</b><br>© 2025 Zendalona</p>
+        <p>
+            Developed by <b>Riya Jain  GSoC'24 Contributor</b> and <b>Sahil Rakhaiya GSoC'25 Contributor</b><br>
+            Mentors: <b>Nalin</b>, <b>Samuel Thibault</b>, <b>K Sathaseelan</b>, <b>Prabhu Kondarangi</b><br>
+            &copy; 2025 Zendalona. All rights reserved.
+        </p>
+
         <h2>Links</h2>
         <ul>
             <li><a href='https://github.com/zendalona/liblouis-table-editor'>GitHub Repository</a></li>
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/Homepage.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/Homepage.py
@@ -25,16 +25,19 @@ class HomeScreen(QWidget):
         self.main_layout.setSpacing(0)  
 
         left_panel = QWidget()
+        left_panel.setAccessibleName("Home Left Panel")
         left_panel.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
         left_layout = QVBoxLayout(left_panel)
         left_layout.setContentsMargins(40, 40, 40, 40)
         left_layout.setSpacing(15)
 
         heading = QLabel("Table making doesn't need to be complex")
+        heading.setAccessibleName("Homepage Heading Label")
         heading.setObjectName("heading")
         heading.setWordWrap(True)
 
         title = QLabel("The Ultimate Tool\nfor Easy\nLiblouis Table Editing")
+        title.setAccessibleName("Homepage Title Label")
         title.setObjectName("title")
         title.setWordWrap(True)
 
@@ -42,35 +45,47 @@ class HomeScreen(QWidget):
             "Streamline the creation and editing of Liblouis translation tables "
             "with our intuitive, cross-platform editor."
         )
+        description.setAccessibleName("Homepage Description Label")
         description.setObjectName("description")
         description.setWordWrap(True)
 
         button_container = QWidget()
+        button_container.setAccessibleName("Homepage Button Container")
         button_layout = QHBoxLayout(button_container)
         button_layout.setSpacing(10)
         button_layout.setContentsMargins(0, 10, 0, 10)
 
         create_button = QPushButton("Create new table")
+        create_button.setAccessibleName("Create New Table Button")
         create_button.setObjectName("createBtn")
         create_button.setCursor(Qt.PointingHandCursor)
         create_button.clicked.connect(self.create_new_table)
+        create_button.setFocusPolicy(Qt.StrongFocus)
 
         open_button = QPushButton("Open existing table")
+        open_button.setAccessibleName("Open Existing Table Button")
         open_button.setObjectName("openBtn")
         open_button.setCursor(Qt.PointingHandCursor)
         open_button.clicked.connect(self.open_existing_table)
+        open_button.setFocusPolicy(Qt.StrongFocus)
 
         button_layout.addWidget(create_button)
         button_layout.addWidget(open_button)
         button_layout.addStretch()
 
         recent_label = QLabel("Recent Files")
+        recent_label.setAccessibleName("Recent Files Label")
         recent_label.setObjectName("recent_label")
         
         self.recent_files_list = QListWidget()
+        self.recent_files_list.setAccessibleName("Recent Files List")
         self.recent_files_list.setObjectName("recentFiles")
         self.recent_files_list.setMaximumHeight(120)
         self.recent_files_list.itemDoubleClicked.connect(self.open_recent_file)
+        self.recent_files_list.setFocusPolicy(Qt.StrongFocus)
+        self.recent_files_list.setSelectionMode(QListWidget.SingleSelection)
+        self.recent_files_list.setEditTriggers(QListWidget.NoEditTriggers)
+        self.recent_files_list.installEventFilter(self)
 
         left_layout.addWidget(heading)
         left_layout.addWidget(title)
@@ -81,6 +96,7 @@ class HomeScreen(QWidget):
         left_layout.addStretch()
 
         self.right_panel = QLabel()
+        self.right_panel.setAccessibleName("Homepage Right Panel")
         self.right_panel.setObjectName("rightPanel")
         self.right_panel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
         self.right_panel.setMinimumWidth(400)
@@ -235,3 +251,12 @@ class HomeScreen(QWidget):
                 item.setData(Qt.UserRole, file_path)
                 item.setToolTip(file_path)
                 self.recent_files_list.addItem(item)
+
+    def eventFilter(self, obj, event):
+        if obj == self.recent_files_list and event.type() == event.KeyPress:
+            if event.key() in (Qt.Key_Return, Qt.Key_Enter, Qt.Key_Space):
+                selected_items = self.recent_files_list.selectedItems()
+                if selected_items:
+                    self.open_recent_file(selected_items[0])
+                    return True
+        return super().eventFilter(obj, event)
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/TableEditor.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/TableEditor.py
@@ -56,15 +56,18 @@ class TableEditor(QWidget):
 
         if not self.liblouis_found:
             self.liblouis_warning_label = QLabel("<b style='color: #d32f2f;'>Warning: Liblouis is not installed. Some features will not work.</b>")
+            self.liblouis_warning_label.setAccessibleName("Liblouis Warning Label")
             self.liblouis_warning_label.setAlignment(Qt.AlignCenter)
             main_layout.addWidget(self.liblouis_warning_label)
 
         top_layout = QHBoxLayout()
 
         self.table_preview = TablePreview(self)
+        self.table_preview.setAccessibleName("Table Preview Widget")
         top_layout.addWidget(self.table_preview)
 
         self.add_entry_widget = AddEntryWidget()
+        self.add_entry_widget.setAccessibleName("Add Entry Widget")
         
         self.add_entry_widget.add_button.clicked.connect(self.add_entry)
         top_layout.addWidget(self.add_entry_widget)
@@ -74,12 +77,14 @@ class TableEditor(QWidget):
         main_layout.addLayout(top_layout)
 
         self.toggle_testing_button = QPushButton("Show Testing Panel (Ctrl+Q)")
+        self.toggle_testing_button.setAccessibleName("Show Testing Panel Button")
         self.toggle_testing_button.setCheckable(True)
         self.toggle_testing_button.setChecked(False)
         self.toggle_testing_button.clicked.connect(self.toggle_testing_widget)
         main_layout.addWidget(self.toggle_testing_button)
 
         self.testing_widget = TestingWidget(self)
+        self.testing_widget.setAccessibleName("Testing Widget")
         main_layout.addWidget(self.testing_widget)
 
         self.testing_widget.hide()
@@ -90,6 +95,11 @@ class TableEditor(QWidget):
         shortcut = QShortcut(QKeySequence("Ctrl+Q"), self)
         shortcut.activated.connect(self.toggle_testing_widget)
 
+        self.add_entry_shortcut = QShortcut(QKeySequence("Ctrl+Return"), self)
+        self.add_entry_shortcut.activated.connect(self.add_entry)
+        self.add_entry_shortcut2 = QShortcut(QKeySequence("Ctrl+Enter"), self)
+        self.add_entry_shortcut2.activated.connect(self.add_entry)
+
         apply_styles(self)
 
         self.toast = None
@@ -111,14 +121,14 @@ class TableEditor(QWidget):
     def add_entry(self):
         entry_data = self.add_entry_widget.collect_entry_data()
         if not self.validate_entry_data(entry_data):
-            self.show_toast("Invalid entry data!", get_icon_for_toast('error'), 255, 0, 0)
+            self.show_toast("Invalid entry data! (Ctrl+Enter to add entry)", get_icon_for_toast('error'), 255, 0, 0)
             return
         
         self._save_state_for_undo()
         
         self.table_preview.add_entry(entry_data)
         self.mark_as_unsaved()
-        self.show_toast("Entry added successfully!", get_icon_for_toast('success'), 75, 175, 78)
+        self.show_toast("Entry added successfully! (Ctrl+Enter to add entry)", get_icon_for_toast('success'), 75, 175, 78)
 
     def _save_state_for_undo(self):
         current_content = self.get_content().copy() if isinstance(self.get_content(), list) else self.get_content()
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/TablePreview.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/TablePreview.py
@@ -16,7 +16,7 @@ class TablePreview(QWidget):
         self.max_font_size = 24
         apply_styles(self)
         self.initUI()
-        self.setFocusPolicy(Qt.StrongFocus)
+        self.setFocusPolicy(Qt.NoFocus)
 
     def initUI(self):
         self.setObjectName("table_preview")
@@ -25,12 +25,14 @@ class TablePreview(QWidget):
         self.layout.setSpacing(2)
 
         self.scroll_area = QScrollArea(self)
+        self.scroll_area.setAccessibleName("Table Preview Scroll Area")
         self.scroll_area.setWidgetResizable(True)
         self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
         self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
         self.scroll_area.setFocusPolicy(Qt.NoFocus) 
         
         self.scroll_widget = QWidget()
+        self.scroll_widget.setAccessibleName("Table Preview Scroll Widget")
         self.scroll_layout = QVBoxLayout(self.scroll_widget)
         self.scroll_layout.setAlignment(Qt.AlignTop)
         self.scroll_layout.setContentsMargins(0, 0, 0, 0)
@@ -74,8 +76,16 @@ class TablePreview(QWidget):
             
     def add_entry(self, entry):
         self.entries.append(entry)
+
+        def extract_number(e):
+            parts = e.split()
+            try:
+                return int(parts[0])
+            except (ValueError, IndexError):
+                return float('inf')
+        self.entries.sort(key=extract_number)
         self.update_content()
-        self.select_entry(len(self.entries) - 1)
+        self.select_entry(self.entries.index(entry))
 
     def handle_entry_click(self, widget, event):
         if event.button() == Qt.LeftButton:
@@ -112,14 +122,10 @@ class TablePreview(QWidget):
         if 0 <= index < len(self.entry_widgets):
             if 0 <= self.current_index < len(self.entry_widgets):
                 self.entry_widgets[self.current_index].setSelected(False)
-            
             self.current_index = index  
-            
             widget = self.entry_widgets[index]
             widget.setSelected(True)
-            
             self.ensure_widget_visible(widget)
-            
             if hasattr(self.table_editor, 'load_entry_into_editor'):
                 self.table_editor.load_entry_into_editor(self.entries[index])
 
@@ -198,13 +204,23 @@ class TablePreview(QWidget):
                 event.accept()
                 return
         elif key == Qt.Key_Tab and not event.isAutoRepeat():
-            if event.modifiers() == Qt.ShiftModifier:
-                if self.current_index > 0:
+            if modifiers == Qt.ShiftModifier:
+                if self.current_index == 0:
+                    if hasattr(self.table_editor, 'add_entry_widget'):
+                        self.table_editor.add_entry_widget.setFocus()
+                        event.accept()
+                        return
+                else:
                     self.select_entry(self.current_index - 1)
                     event.accept()
                     return
             else:
-                if self.current_index < len(self.entry_widgets) - 1:
+                if self.current_index == len(self.entry_widgets) - 1:
+                    if hasattr(self.table_editor, 'add_entry_widget'):
+                        self.table_editor.add_entry_widget.setFocus()
+                        event.accept()
+                        return
+                else:
                     self.select_entry(self.current_index + 1)
                     event.accept()
                     return
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/TestCaseWidget.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/TestCaseWidget.py
@@ -1,9 +1,9 @@
 from PyQt5.QtWidgets import (
     QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
     QLabel, QTextEdit, QMessageBox, QTableWidget,
-    QTableWidgetItem, QHeaderView
+    QTableWidgetItem, QHeaderView, QSizePolicy
 )
-from PyQt5.QtCore import Qt
+from PyQt5.QtCore import Qt, QEvent
 import unicodedata
 import re
 import time
@@ -17,38 +17,63 @@ class TestCaseWidget(QWidget):
 
     def initUI(self):
         layout = QVBoxLayout()
-        
-        input_section = QHBoxLayout()
-        
-        input_group = QVBoxLayout()
+
+        labels_row = QHBoxLayout()
         input_label = QLabel("Test Input:")
+        input_label.setAccessibleName("Test Input Label")
+        output_label = QLabel("Expected Braille:")
+        output_label.setAccessibleName("Expected Braille Label")
+        labels_row.addWidget(input_label)
+        labels_row.addStretch(1)
+        labels_row.addWidget(output_label)
+        labels_row.addStretch(2) 
+        layout.addLayout(labels_row)
+
+        input_fields_row = QHBoxLayout()
+
+        input_group = QVBoxLayout()
         self.input_text = QTextEdit()
+        self.input_text.setAccessibleName("Test Input Text Area")
         self.input_text.setPlaceholderText("Enter test input text")
         self.input_text.setMaximumHeight(100)
-        input_group.addWidget(input_label)
+        self.input_text.installEventFilter(self)
         input_group.addWidget(self.input_text)
-        
+
         output_group = QVBoxLayout()
-        output_label = QLabel("Expected Braille:")
         self.expected_output = QTextEdit()
+        self.expected_output.setAccessibleName("Expected Braille Text Area")
         self.expected_output.setPlaceholderText("Enter expected Braille output using F, D, S, J, K, L keys for dots 1-6, space for next cell, double space for word space")
         self.expected_output.setMaximumHeight(100)
         self.expected_output.keyPressEvent = self.handle_expected_braille_input
         self.current_expected_braille_cell = [False] * 6  
         self.last_expected_space_time = 0  
-        output_group.addWidget(output_label)
+        self.expected_output.installEventFilter(self)
         output_group.addWidget(self.expected_output)
-        
-        input_section.addLayout(input_group)
-        input_section.addLayout(output_group)
-        
-        button_layout = QHBoxLayout()
+
+        button_column_layout = QVBoxLayout()
         self.add_test_button = QPushButton("Add Test Case")
+        self.add_test_button.setAccessibleName("Add Test Case Button")
         self.run_tests_button = QPushButton("Run All Tests")
-        button_layout.addWidget(self.add_test_button)
-        button_layout.addWidget(self.run_tests_button)
-        
+        self.run_tests_button.setAccessibleName("Run All Tests Button")
+        button_column_layout.addWidget(self.add_test_button)
+        button_column_layout.addStretch(1)
+        button_column_layout.addWidget(self.run_tests_button)
+
+        button_column_widget = QWidget()
+        button_column_widget.setLayout(button_column_layout)
+        max_height = max(self.input_text.maximumHeight(), self.expected_output.maximumHeight())
+        button_column_widget.setMaximumHeight(max_height)
+        button_column_widget.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
+
+        input_fields_row.addLayout(input_group)
+        input_fields_row.addLayout(output_group)
+        input_fields_row.addWidget(button_column_widget)
+        input_fields_row.setAlignment(button_column_widget, Qt.AlignTop)
+
+        layout.addLayout(input_fields_row)
+
         self.test_table = QTableWidget()
+        self.test_table.setAccessibleName("Test Cases Table")
         self.test_table.setColumnCount(4)
         self.test_table.setHorizontalHeaderLabels(["Input", "Expected", "Result", "Status"])
         header = self.test_table.horizontalHeader()
@@ -58,13 +83,11 @@ class TestCaseWidget(QWidget):
         header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
         self.test_table.setObjectName("test_table")
         self.test_table.setEditTriggers(QTableWidget.NoEditTriggers)
-        
-        layout.addLayout(input_section)
-        layout.addLayout(button_layout)
+
         layout.addWidget(self.test_table)
-        
+
         self.setLayout(layout)
-        
+
         self.add_test_button.clicked.connect(self.add_test_case)
         self.run_tests_button.clicked.connect(self.run_all_tests)
 
@@ -209,3 +232,14 @@ class TestCaseWidget(QWidget):
             else:
                 self.expected_output.setPlainText(current_text[:-1])
                 self.current_expected_braille_cell = [False] * 6 
+
+    def eventFilter(self, obj, event):
+
+        if isinstance(obj, QTextEdit) and event.type() == QEvent.KeyPress:
+            if event.key() == Qt.Key_Tab and not event.modifiers():
+                self.focusNextChild()
+                return True
+            elif event.key() == Qt.Key_Backtab:
+                self.focusPreviousChild()
+                return True
+        return super().eventFilter(obj, event) 
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/components/TestingWidget.py
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/components/TestingWidget.py
@@ -1,8 +1,9 @@
 from PyQt5.QtWidgets import (
     QWidget, QHBoxLayout, QVBoxLayout, QLineEdit, 
-    QPushButton, QLabel, QMessageBox, QTextEdit, QTabWidget
+    QPushButton, QLabel, QMessageBox, QTextEdit, QTabWidget, QShortcut
 )
-from PyQt5.QtCore import Qt
+from PyQt5.QtCore import Qt, QEvent
+from PyQt5.QtGui import QKeySequence
 import os
 import subprocess
 import sys
@@ -51,9 +52,8 @@ class TestingWidget(QWidget):
             self.liblouis_base = None
             self.tables_dir = None
             self.translator_exe = None
-            # Removed warning print to reduce console spam - executable missing handled gracefully
+
         elif not os.path.exists(self.tables_dir):
-            # Removed warning print to reduce console spam - tables directory missing handled gracefully
             pass
 
     def initUI(self):
@@ -61,9 +61,11 @@ class TestingWidget(QWidget):
         main_layout.setSpacing(6)
         main_layout.setContentsMargins(6, 6, 6, 6)
         
-        tab_widget = QTabWidget()
+        self.tab_widget = QTabWidget()
+        self.tab_widget.setAccessibleName("Translation and Test Cases Tabs")
         
         translation_widget = QWidget()
+        translation_widget.setAccessibleName("Translation Widget")
         translation_layout = QVBoxLayout()
         translation_layout.setSpacing(6)
         translation_layout.setContentsMargins(6, 6, 6, 6)
@@ -72,6 +74,7 @@ class TestingWidget(QWidget):
         forward_group.setSpacing(6)
         forward_group.setContentsMargins(6, 6, 6, 6)
         forward_label = QLabel("Forward Translation (Text to Braille):")
+        forward_label.setAccessibleName("Forward Translation Label")
         
         forward_io_layout = QHBoxLayout()
         forward_io_layout.setSpacing(6)
@@ -81,10 +84,13 @@ class TestingWidget(QWidget):
         forward_input_group.setSpacing(3)
         forward_input_group.setContentsMargins(0, 0, 0, 0)
         forward_input_label = QLabel("Input Text:")
+        forward_input_label.setAccessibleName("Forward Input Label")
         self.forward_input = QTextEdit(self)
+        self.forward_input.setAccessibleName("Forward Input Text Area")
         self.forward_input.setPlaceholderText("Enter text to translate")
         self.forward_input.setMaximumHeight(100)
         self.forward_input.keyPressEvent = self.handle_forward_key_press
+        self.forward_input.installEventFilter(self)
         forward_input_group.addWidget(forward_input_label)
         forward_input_group.addWidget(self.forward_input)
         
@@ -92,7 +98,9 @@ class TestingWidget(QWidget):
         forward_output_group.setSpacing(3)
         forward_output_group.setContentsMargins(0, 0, 0, 0)
         forward_output_label = QLabel("Output Braille:")
+        forward_output_label.setAccessibleName("Forward Output Label")
         self.forward_output = QTextEdit(self)
+        self.forward_output.setAccessibleName("Forward Output Text Area")
         self.forward_output.setPlaceholderText("Braille output will appear here")
         self.forward_output.setMaximumHeight(100)
         self.forward_output.setReadOnly(True)
@@ -103,6 +111,7 @@ class TestingWidget(QWidget):
         forward_button_layout.setSpacing(0)
         forward_button_layout.setContentsMargins(0, 45, 0, 0) 
         self.forward_button = QPushButton("→ Translate to Braille", self)
+        self.forward_button.setAccessibleName("Translate to Braille Button")
         self.forward_button.setObjectName("forward_button")
         self.forward_button.setToolTip("Click to translate text to Braille (or press Ctrl+Enter)")
         self.forward_button.setFixedSize(200, 40)
@@ -122,6 +131,7 @@ class TestingWidget(QWidget):
         backward_group.setSpacing(6)
         backward_group.setContentsMargins(6, 6, 6, 6)
         backward_label = QLabel("Backward Translation (Braille to Text):")
+        backward_label.setAccessibleName("Backward Translation Label")
         
         backward_io_layout = QHBoxLayout()
         backward_io_layout.setSpacing(6)
@@ -131,12 +141,15 @@ class TestingWidget(QWidget):
         backward_input_group.setSpacing(3)
         backward_input_group.setContentsMargins(0, 0, 0, 0)
         backward_input_label = QLabel("Input Braille:")
+        backward_input_label.setAccessibleName("Backward Input Label")
         self.backward_input = QTextEdit(self)
+        self.backward_input.setAccessibleName("Backward Input Text Area")
         self.backward_input.setPlaceholderText("Enter Braille using F, D, S, J, K, L keys for dots 1-6, space for next cell, double space for word space")
         self.backward_input.setMaximumHeight(100)
         self.backward_input.keyPressEvent = self.handle_braille_input
         self.current_braille_cell = [False] * 6 
         self.last_space_time = 0 
+        self.backward_input.installEventFilter(self)
         backward_input_group.addWidget(backward_input_label)
         backward_input_group.addWidget(self.backward_input)
         
@@ -144,7 +157,9 @@ class TestingWidget(QWidget):
         backward_output_group.setSpacing(3)
         backward_output_group.setContentsMargins(0, 0, 0, 0)
         backward_output_label = QLabel("Output Text:")
+        backward_output_label.setAccessibleName("Backward Output Label")
         self.backward_output = QTextEdit(self)
+        self.backward_output.setAccessibleName("Backward Output Text Area")
         self.backward_output.setPlaceholderText("Text output will appear here")
         self.backward_output.setMaximumHeight(100)
         self.backward_output.setReadOnly(True)
@@ -155,6 +170,7 @@ class TestingWidget(QWidget):
         backward_button_layout.setSpacing(0)
         backward_button_layout.setContentsMargins(0, 45, 0, 0)  
         self.backward_button = QPushButton("← Translate to Text", self)
+        self.backward_button.setAccessibleName("Translate to Text Button")
         self.backward_button.setObjectName("backward_button")
         self.backward_button.setToolTip("Click to translate Braille to text (or press Ctrl+Enter)")
         self.backward_button.setFixedSize(200, 40)
@@ -176,12 +192,13 @@ class TestingWidget(QWidget):
         
         self.test_case_widget = TestCaseWidget(self)
         
-        tab_widget.addTab(translation_widget, "Translation")
-        tab_widget.addTab(self.test_case_widget, "Test Cases")
+        self.tab_widget.addTab(translation_widget, "Translation")
+        self.tab_widget.addTab(self.test_case_widget, "Test Cases")
         
-        main_layout.addWidget(tab_widget)
+        main_layout.addWidget(self.tab_widget)
         
         self.status_label = QLabel("")
+        self.status_label.setAccessibleName("Status Label")
         self.status_label.setStyleSheet("color: gray; font-style: italic;")
         main_layout.addWidget(self.status_label)
         
@@ -191,6 +208,11 @@ class TestingWidget(QWidget):
         self.backward_button.clicked.connect(self.translate_backward)
         
         self.update_status()
+        
+        self.shortcut_ctrl_w = QShortcut(QKeySequence("Ctrl+W"), self)
+        self.shortcut_ctrl_w.activated.connect(lambda: self.tab_widget.setCurrentIndex(0))
+        self.shortcut_ctrl_e = QShortcut(QKeySequence("Ctrl+E"), self)
+        self.shortcut_ctrl_e.activated.connect(lambda: self.tab_widget.setCurrentIndex(1))
     
     def set_current_table(self, table_path):
         self.current_table = table_path
@@ -370,3 +392,14 @@ class TestingWidget(QWidget):
                 self.backward_output.setText(result)
         else:
             QMessageBox.warning(self, "Error", "Please enter Braille to translate")
+
+    def eventFilter(self, obj, event):
+
+        if isinstance(obj, QTextEdit) and event.type() == QEvent.KeyPress:
+            if event.key() == Qt.Key_Tab and not event.modifiers():
+                self.focusNextChild()
+                return True
+            elif event.key() == Qt.Key_Backtab:
+                self.focusPreviousChild()
+                return True
+        return super().eventFilter(obj, event)
--- liblouis-table-editor-1.0.orig/src/liblouis_table_editor/styles.qss
+++ liblouis-table-editor-1.0/src/liblouis_table_editor/styles.qss
@@ -239,6 +239,11 @@ QPushButton#translate_button:pressed {
   border: 1px solid #1a1a1a;
 }
 
+QPushButton#translate_button[tabFocus="true"] {
+  outline: 2px solid #339af0 !important;
+  outline-offset: 2px;
+}
+
 .char-button {
   font-size: 32px;
   background-color: #f0f8ff;
@@ -701,3 +706,10 @@ QFrame#entry_line {
     border-radius: 1px;
     border: none;
 }
+
+/* Only show black outline for keyboard navigation (not mouse) */
+QLineEdit[tabFocus="true"], QTextEdit[tabFocus="true"], QPushButton[tabFocus="true"] {
+  outline: 2px solid #000000;
+  outline-offset: 0px;
+  border: 1.5px solid #000000;
+}
